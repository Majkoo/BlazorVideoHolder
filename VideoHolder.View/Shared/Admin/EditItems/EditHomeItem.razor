@using VideoHolder.Data.Enums
@inject IItemFactory ItemFactory
@inject DialogService DialogService

<RadzenDataGrid Data="@_items" TItem="HomeItem" AllowSorting="true" FilterMode="FilterMode.Simple" AllowFiltering="true"
                PageSize="5" AllowPaging="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Right">
    <Columns>
        <RadzenDataGridColumn TItem="HomeItem" Title="Typ" Property="ItemType" Width="80px" CssClass="text-center" Filterable="false">
            <Template Context="HomeItem data">
                @switch(data.ItemType)
                {
                    case ItemType.Picture:
                        <RadzenIcon Icon="photo_camera" />
                        break;
                    case ItemType.Video:
                        <RadzenIcon Icon="videocam" />
                        break;
                    default:
                        <span>@data.ItemType</span>
                        break;
                }
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="HomeItem" Title="Miniaturka" Width="160px" Sortable="false" Filterable="false" Pickable="true">
            <Template Context="data">
                <div class="w-100 postItemIframe">
                    @if (data.ItemType == ItemType.Video)
                    {
                        <video src="@data.Url" class="img-fluid"></video>
                    }
                    else
                    {
                        <RadzenImage Path="@data.Url" class="img-fluid"/>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="HomeItem" Title="Nazwa" Property="Name" Width="230px">
            <Template Context="data">
                <div class="w-100 text-wrap">@data.Name</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HomeItem" Title="Opis" Property="Description">
            <Template Context="data">
                <div class="w-100 text-wrap">@(data.Description.Length > 45 ? $"{data.Description[..45]}..." : data.Description)</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HomeItem" Title="Data Dodania" Property="PostDateTime" Width="160px" CssClass="text-center" Filterable="false"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HomeItem" Title="Edytuj" TextAlign="TextAlign.Center" Width="150px">
            <Template>
                <RadzenButton Text="Edytuj" ButtonStyle="ButtonStyle.Warning" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HomeItem" Title="Usuń" TextAlign="TextAlign.Center" Width="150px">
            <Template Context="data">
            <RadzenButton Text="Usuń" ButtonStyle="ButtonStyle.Danger"
                          Click="@(args => DialogService.Confirm($"Czy na pewno chcesz usunąć \"{data.Name}\"? // not implemented", "Usuń",  _confirmOptions))" />
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
@code {
    private IEnumerable<HomeItem> _items;

    private readonly ConfirmOptions _confirmOptions = new ConfirmOptions()
    {
        OkButtonText = "Tak",
        CancelButtonText = "Nie",
        CloseDialogOnEsc = true,
        CloseDialogOnOverlayClick = false,
    };

    protected override async Task OnInitializedAsync()
    {
        _items = await ItemFactory.GetHomeItems();
    }
}